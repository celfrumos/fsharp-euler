#if INTERACTIVE
module HighDivTriangleNumber =
#else 
module HighDivTriangleNumber
#endif

(*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
*)
    open System
    open Extensions
    type TriangleNum = {Rank:int; Value: int; Divisors: int list }
    let getNthTriangleNum n =
        let rec calculate num =
            if num = 1 then 
                1
            else
                num + calculate (num - 1)
        let value = calculate n
        let divisors = Int.GetAllFactors value
        {Rank = n; Value = value; Divisors = divisors}

    let GetTriangleNumWithNDivisors n = 
        let rec calculate rank =
            let num = getNthTriangleNum rank
            if List.length num.Divisors = n then   
                num
            else
                return! calculate (rank + 1)
        

        calculate 500            

       
        
    

    let testResult = async{ 
        return! GetTriangleNumWithNDivisors 5
    }
    